# This file is sourced when you start an interactive, non-login shell. These are
# the most common shells, started in scenarios such as the following:
#
#   - open a terminal in a graphical session
#   - open an emacs shell buffer
#   - start a shell within an existing shell
#
# This file IS NOT sourced when you start a non-interactive, non-login shell,
# such as when running a bash script. There is one exception to this, though, on
# Debian at least: It is sourced when running a command remotely via ssh. For
# consistency with other non-interactive shells, prevent this file from running
# in non-interactive mode.
#
# Prior to sourcing this file, bash sources the system bashrc in
# /etc/bash.bashrc.
#
# Because this file might be sourced in an environment multiple times, ideally
# its actions will be idempotent. That is, running an action multiple times will
# always produce the same result.
#
# This file shouldn't write anything to stdout. Doing so will cause problems
# with scp and sftp.


# Bail out if not running interactively.
if [[ $- != *i* ]]; then
    return 0
fi


#-------------------------------------------------------------------------------
# Utility functions

function source_if_available() {
    local file=$1

    if [[ -f $file && -r $file ]]; then
        source "$file"
        return 0
    fi

    return 1
}

function source_first_available() {
    until [[ $# == 0 ]]; do
        if source_if_available "$1"; then
            return 0
        fi
        shift
    done

    return 1
}

function source_dir() {
    local dir=$1
    local file

    if [[ -d $dir && -r $dir && -x $dir ]]; then
        for file in "$dir"/*; do
           source_if_available "$file"
        done

        return 0
    fi

    return 1
}

# Add a directory to $PATH.
function path_add() {
    if [[ $# == 0 || $1 == "-h" || $1 == "--help" ]]; then
        echo 'Add a directory to $PATH. By default, add to the beginning of $PATH,'
        echo 'but do nothing if the directory is already in $PATH.'
        echo
        echo 'Usage:'
        echo '  path_add [--end] [--dup=allow|remove] <dir>'
        echo
        echo 'Options:'
        echo '  --end: Add the directory to the end of $PATH instead of the beginning.'
        echo '  --dup: Add the directory to $PATH even if it is already in $PATH.'
        echo '    =allow: Leave the existing entries untouched.'
        echo '    =remove: Remove the existing entries first.'
        return 0
    fi

    local where=beginning
    local dup=noop
    while [[ $1 == --* ]]; do
        case $1 in
            --end)
                where=end
                ;;
            --dup=allow)
                dup=allow
                ;;
            --dup=remove)
                dup=remove
                ;;
            *)
                path_add --help
                return 1
                ;;
        esac
        shift
    done

    local dir=$1
    if [[ -z $dir ]]; then
        path_add --help
        return 1
    fi

    if in_path $dir; then
        if [[ $dup == noop ]]; then
            return 0
        elif [[ $dup == remove ]]; then
            path_rm --all $dir
        fi
    fi

    if [[ $where == end ]]; then
        export PATH=$PATH:$dir
    else
        export PATH=$dir:$PATH
    fi
}

# Remove a directory from $PATH.
function path_rm() {
    if [[ $# == 0 || $1 == "-h" || $1 == "--help" ]]; then
        echo 'Remove a directory from $PATH. By default, remove only the first'
        echo 'instance if the directory appears in $PATH multiple times.'
        echo
        echo 'Usage:'
        echo '  path_rm [--all] <path>'
        echo
        echo 'Options:'
        echo '  --all: Remove all instances, not just the first one.'
        return 0
    fi

    local all=0
    if [[ $1 == --all || $1 == -a ]]; then
        all=1
        shift
    fi

    local dir=$1
    if [[ -z $dir ]]; then
        path_rm --help
        return 1
    fi

    local working_path=:$PATH:
    if [[ $all == 1 ]]; then
        working_path=${working_path//:$dir:/:}
    else
        working_path=${working_path/:$dir:/:}
    fi
    working_path=${working_path%:}
    working_path=${working_path#:}

    export PATH=$working_path
}

# Succeed if a directory is found in $PATH.
function in_path() {
    local dir=$1
    [[ ":$PATH:" == *":$dir:"* ]]
}

# Set the terminal's title.
function set_title() {
    echo -n -e "\033]0;$*\007"
}

function command_exists() {
    command -v "$1" &>/dev/null;
}


#-------------------------------------------------------------------------------
# Reset PROMPT_COMMAND
#
# PROMPT_COMMAND defines a command to run before displaying each new prompt.
# Distros tend to set a default value for it. For example, the default might be
# to change the window title to match the working directory (which I hate).
#
# Reset the command to a no-op to override any distro default. Using a no-op
# instead of unsetting it allows me to append to it later without checking
# whether it's empty or not. For example, appending to it like this:
#
#   PROMPT_COMMAND="${PROMPT_COMMAND}; another_command"
#
# would produce the value:
#
#   ; another_command
#
# if PROMPT_COMMAND were empty. Starting a command with a semicolon is a syntax
# error in bash.

PROMPT_COMMAND=:


#-------------------------------------------------------------------------------
# PATH section

for app_dir in /opt/*; do
    path_add $app_dir/bin
done

for app_dir in ~/apps/opt/*; do
    path_add $app_dir/bin
done

path_add ~/apps/local/bin
path_add ~/apps/bin


#-------------------------------------------------------------------------------
# Bash options section
#
# Note: Other bash options may be set in specific topic-area sections elsewhere
# in this file.

# Don't autocorrect cd misspellings.
shopt -u cdspell

# Update LINES and COLUMNS after each command.
shopt -s checkwinsize

# Enable aliases (such as alias rm='rm -i').
shopt -s expand_aliases

# Complete an FIGNORE'd file if it's the only possible completion.
shopt -u force_fignore

# Enable programmable completion (completion rules installed by specific
# applications).
shopt -s progcomp

# Perform parameter expansion, command substition, etc. on the prompt.
shopt -s promptvars

# Search PATH to find sourced files.
shopt -s sourcepath


#-------------------------------------------------------------------------------
# History section

# Append to the global history after every command, not just when the session
# exits. This prevents me from losing all history if a session exits uncleanly.
PROMPT_COMMAND="${PROMPT_COMMAND}; history -a"

# Save all lines of a multiple-line command in the same history entry.
shopt -s cmdhist

# Append to the global history file instead of overwriting it when the session
# exits.
#
# Because I'm appending to the global history file after every command (via
# history -a in PROMPT_COMMAND) , there will be nothing new to write when the
# session exits. Therefore, it doesn't matter whether I append or overwrite.
# However, I'm keeping this option to be on the safe side, in case I ever remove
# history -a from PROMPT_COMMAND (intentionally or accidentally).
shopt -s histappend

# Add failed commands to the history.
shopt -s histreedit

# Increase the number of commands stored in the history beyond the default 500.
# HISTSIZE is the number stored in a session's memory, and HISTFILESIZE is the
# number stored in the global history file.
HISTSIZE=10000
HISTFILESIZE=10000

# Don't litter the history with certain commands.
# (I'm leaving this here in case I change my mind again later, but after using
# this for a while, I find that I'm often annoyed when commands aren't added to
# the history, because it throws off the number of up-arrows required to reach
# an earlier command.)
#HISTIGNORE="exit:ls:cd"


#-------------------------------------------------------------------------------
# Prompt section
#
# Define a custom prompt. The prompt itself is stored in variable PS1. Because I
# want the prompt to be dynamic, PS1 must be updated each time the prompt is
# displayed. This is accomplished by adding a function to PROMPT_COMMAND that
# generates a new PS1. PROMPT_COMMAND is executed before each prompt is
# displayed.

# Define more human-readable names for formatting sequences.
reset=$(tput sgr0)
bold=$(tput bold)

function set_custom_prompt() {

    # Extract the name of the current python virtual environment, if any.

    local py_env

    if [[ $VIRTUAL_ENV != "" ]]; then
        py_env=${VIRTUAL_ENV##*/}
    elif [[ $CONDA_DEFAULT_ENV != "" ]]; then
        py_env="$CONDA_DEFAULT_ENV"
    else
        py_env=''
    fi

    if [[ $py_env != "" ]]; then
        PY_ENV_PS1=" • py:${py_env}"
    else
        PY_ENV_PS1=''
    fi

    # Extract the name of the current git branch, if any.

    local git_branch

    git_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    if [[ $git_branch == "HEAD" ]]; then
        git_branch="detached"
    fi

    if [[ $git_branch != "" ]]; then
        GIT_BRANCH_PS1=" • git:${git_branch}"
    else
        GIT_BRANCH_PS1=''
    fi

    # Create a horizontal bar occupying the full width of the terminal.

    local ncols
    ncols=$(tput cols)
    HBAR=$(printf "%*s" $ncols "" | sed "s/ /═/g")

    # Four-line prompt:
    #   line 0: horizontal bar
    #   line 1: environment info
    #   line 2: working directory
    #   line 3: prompt
    #
    # Use a unicode dot to separate the user from the hostname instead of the @
    # sign. The @ sign doesn't work well in the prompt when using the DejaVu
    # font, because the @ is too wide and is truncated by the next character. It
    # works OK with other fonts, though. (See ~/.Xresources for defining the
    # font.)

    local line0 line1 line2 line3
    line0=$'$HBAR'
    line1=$'\u • \h${PY_ENV_PS1}${GIT_BRANCH_PS1}'
    line2=$'\w'
    line3=$'\$ '
    PS1="\[$reset\]\[$bold\]$line0\n$line1\n$line2\n$line3\[$reset\]"
}

PROMPT_COMMAND="${PROMPT_COMMAND}; set_custom_prompt"


#-------------------------------------------------------------------------------
# Alias section

# for protecting myself

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ln='ln -i'

# for ls

alias ls='ls -F'
alias sl='ls -F'
alias ks='ls -F'
alias  s='ls -F'

# app-specific

alias R='R --no-restore --no-save'
alias d=docker
alias dc=docker-compose
# fd is named fdfind in the Debian package, because fd was already taken.
alias fd=fdfind

function dr() {
    # This one needs to be in a function so that $(pwd) will be re-evaluated on
    # every invocation.
    docker run --rm --user "$(id -u):$(id -g)" --volume $(pwd):/code "$@";
}


#-------------------------------------------------------------------------------
# direnv section

# direnv will execute .envrc scripts when entering a directory. If the script
# exports any environment variables, direnv will inject them into the current
# shell. The scrips can access functions from direnv's standard library and from
# ~/.config/direnv/direnvrc

if command_exists direnv; then
    eval "$(direnv hook bash)"
fi


#-------------------------------------------------------------------------------
# Python section

PYENV_ROOT="$HOME/apps/opt/pyenv"
if [[ -d $PYENV_ROOT ]]; then
    export PYENV_ROOT
fi

PP_ROOT="$HOME/apps/opt/pp"
if [[ -d $PP_ROOT ]]; then
   export PP_ROOT
   source "$PP_ROOT/lib/pp.bash"
   source "$PP_ROOT/lib/completions.bash"
   export -f pp
fi

# By default, activating a virtual environment adds the environment name to the
# prompt. I don't want it to do that, because I'm updating the prompt myself
# elsewhere in this script.
export VIRTUAL_ENV_DISABLE_PROMPT=1

PIPX_HOME="$HOME/apps/opt/pipx"
if [[ -d $PIPX_HOME ]]; then
    export PIPX_HOME
    export PIPX_BIN_DIR="$PIPX_HOME/bin"
fi


#-------------------------------------------------------------------------------
# Node.js section

NVS_HOME="$HOME/apps/opt/nvs"
if [[ -d $NVS_HOME ]]; then
   export NVS_HOME
   source "$NVS_HOME/nvs.sh"
fi


#-------------------------------------------------------------------------------
# Miscellaneous section

# 027 is more secure in a multi-user environment but is more trouble than it's
# worth in a single-user environment. Commands run as root, such as through
# sudo, often create files that you can't read as a normal user.
umask 022

# disable shell mail checking
unset MAILCHECK

# ignore backup filenames when completing
FIGNORE="~"

# Disable flow control (in which ^S freezes the terminal and ^Q unfreezes). The
# docs are unclear, but according to http://superuser.com/a/595508, -ixon
# prevents the client from sending flow control commands, and -ixoff prevents
# the host from sending flow control commands. These should be enough to disable
# it. Just to be sure, also unbind the stop and start actions.
stty -ixon
stty -ixoff
stty stop undef
stty start undef

# Enable bash completion in interactive shells.
if ! shopt -oq posix; then
    source_first_available /usr/share/bash-completion/bash_completion /etc/bash_completion
fi

# Make sure to use a decent editor
if command_exists emacs; then
    export EDITOR=$(command -v emacs)
else
    export EDITOR=$(command -v vi)
fi
export VISUAL=$EDITOR


#-------------------------------------------------------------------------------
# Local settings

source_if_available $HOME/.bashrc.local
